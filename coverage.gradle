apply plugin: 'jacoco'
apply plugin: "com.github.kt3k.coveralls"

ext {
    limits = [
            'instruction': 86, //86
            'branch'     : 75, //75
            'line'       : 86, //86
            'complexity' : 82, //82
            'method'     : 88, //88
            'class'      : 100, //100
    ]
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        //XML required by coveralls and for the below coverage checks
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/config/**',
                    '**/exception/**',
                    "**/Application*"
            ])
        }))
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if(it != null) {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def coverageMeasures = []
        def failures = []
        metrics.each {
            def limit = limits[it.key]
            coverageMeasures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            if (it.value != null && it.value < limit) {
                failures.add("- failed to meet ${it.key} coverage. rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (coverageMeasures) {
            logger.quiet("------------------ Code Coverage Report -----------------------")
            coverageMeasures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")

            if(failures) {
                logger.quiet("------------------ Code Coverage Failures -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            }
            else{
                logger.quiet("Passed Code Coverage Checks.")
            }
        }
    }
}
check.dependsOn jacocoTestReport
